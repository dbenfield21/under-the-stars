From OAuth lesson
        
        	<div class="text-end d-flex align-items-center">
          <% // TODO: Add login logic here %> 
          <% if (user) { %>
            <a href="/auth/logout">
              <button type="submit" class="btn btn-warning">Logout</button>
            </a>
          <% } else { %>
            <a href="/auth/google">
              <button type="submit" class="siwg">
                <img id="siwg-image" src="" alt="Sign in with Google" />
              </button>
            </a>
          <% } %>
          </div>



-----------------------------------------------------------

# Planning & Presentation Requirements

## Planning - **Due Friday, November 5th, one hour before the end of class**

You will share with the instructors:

- A *public* **[Trello](https://trello.com/) board** with:
    
    ‚òê **User Stories**, each moving from left to right in the following three lists in your board: 
    
    - **Ice Box**
    - **MVP**
    - **Current**
    - **Completed**
    
    **User Stories** must follow the following template:
    
    ***As a <user role>, I want <feature>, so that <reason>.***
    
    Prioritize your user stories within the MVP card with your ‚Äúwish list‚Äù stories in the Ice Box.
    
    <aside>
    üí° Having a hard time conceptualizing this? Check out [**@ShitUserStory on Twitter**](https://twitter.com/ShitUserStory) to see relatable and irritating user stories.
    
    </aside>
    
    ‚òê A **Wireframes** card containing wireframes for the app‚Äôs main pages of functionality; for example, a Landing Page, Posts Index Page, Favorite Posts Page, Add Post Page, etc.
    
    ‚òê An **ERD** card containing an ERD identifying the attributes of each Data Entity (one for each Model and embedded schema). The ERD also needs to diagram relationships between the Entities (1:1, 1:M, or M:M). Here‚Äôs a [**YouTube video to show you how**](https://www.youtube.com/watch?v=QpdhBUYk7Kk). Here's some examples of acceptable initial ERDs:
    
    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5b6d490e-ea51-4596-b32e-0d510b185285/untitled2x(7).png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5b6d490e-ea51-4596-b32e-0d510b185285/untitled2x(7).png)
    

<aside>
üî• ***Make sure the Trello board you submit is publicly viewable.***

</aside>

Here is an example of an acceptable initial Trello board:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e99da1e2-de52-41ec-aad5-79e79b6f8796/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e99da1e2-de52-41ec-aad5-79e79b6f8796/Untitled.png)

Submit these materials to the appropriate pinned thread in slack.

## GitHub Submission - **Due Friday, November 5th by the end of class after your project has been approved by an instructor**

- A *public* GitHub repo with OAuth fully implemented in your app and an initial readme file.

<aside>
üî• ***Make sure the GitHub repo you submit is publicly viewable!***

</aside>

Submit a link to your GitHub repo to the appropriate pinned thread in slack.

## Deployment - Due Wednesday, November 10th by the end of class

- Your deployed application with **all the work you have completed up to this point**.

Submit a link to your deployed application to the appropriate pinned thread in slack.

## Presentation - Friday, November 12th

You will have a maximum of 8 minutes to present your project following these guidelines:

1. **Introduce the Project:**
    
    ‚òê Intro your project by paraphrasing the README.
    
2. **Demonstrate the Project:**
    
    ‚òê Launch the deployed app by clicking the link in the README.
    
    ‚òê Sign up a new user, then immediately log out.
    
    ‚òê Log in with your preferred user and demonstrate the features of the app.
    
    ‚òê Be sure to demo full-CRUD data operations.
    
3. **Show/discuss your code:**
    
    ‚òê Show the ‚Äúmain‚Äù Mongoose model.
    
    ‚òê Show your favorite EJS template.
    
    ‚òê Show the controller for the main model.
    
4. **Share the experience:**
    
    ‚òê What was your biggest challenge?
    
    ‚òê What are your key learnings/takeaways?
    

Remember, you will have 8 minutes for your presentation, and a short Q&A may follow. While the amount of time you spend in each section is ultimately up to you (as long as you cover all the above points) - it‚Äôs recommended to divide your time evenly among the four sections above so that your presentation has a good flow to it.

# Technical Requirements

## Your App Must:

‚òê **Have at least 2 data entities in addition to the User/Profile Models**. At least one model (not the User model!) should have a relationship with the Profile Model.

‚òê **Use EJS templates to render views to your users**. 

‚òê **Use Google OAuth authentication**. 

‚òê Have **full-CRUD data operations** somewhere within the app‚Äôs features. For example, you can have functionality that **C**reates & **U**pdates a *post* and satisfy **D**elete functionality by implementing the ability to delete *comments*.

‚òê Be styled such that the app looks and feels similar to apps we use daily - in other words **it should have a consistent and polished user interface.**

‚òê Implement basic **authorization** that restricts access to features that need a logged-in user to work (typically CUD data operations) by ‚Äúprotecting‚Äù those routes (using the `isLoggedIn` middleware from the OAuth lesson) from anonymous users. Also, ensure that editing and deletion of data can only be done by the user that created that data (this is done in the controller - refer to the Guide to User-Centric CRUD).

### Optionally, Your App May:

‚òê Consume a third-party API.

‚òê Expose its own API where it returns data resources as JSON.

If you do either of these you do not have to include Update functionality in your application.

# Necessary Deliverables

‚òê **A working full-stack app that meets or exceeds the above technical requirements, built by you, and hosted on the internet**. You may host the application on Heroku or elsewhere - however, we will not troubleshoot non-Heroku deployments.

‚òê **Frequent commits that date back to the very beginning of the project**. Commit messages should be in the present tense, e.g., ‚Äústyle landing page‚Äù instead of ‚Äústyled landing page‚Äù. **Do not ‚Äústart over‚Äù with a new repo.**

‚òê **A `README.md` file** with these sections:

‚òê **App Title:** Contains a description of what the app does and optional background info.

‚òê **Getting Started**: Include a link to the deployed app and your Trello board with the project‚Äôs planning.

‚òê **Screenshot(s):** A screenshot of your app‚Äôs landing page and any other screenshots of interest.

‚òê **Technologies Used**: List of technologies used.

‚òê **Next Steps**: The future enhancements you plan to make to your app (icebox items).

<aside>
‚ÄºÔ∏è Don‚Äôt underestimate the value of a well crafted README. The README introduces your project to prospective employers and forms their first impression of your work!

</aside>

# Getting Started

- **Discuss your app idea with an instructor to get feedback before you dive too deep into user stories and wireframes.**
- Because your app‚Äôs functionality revolves around the logged-in user, **implement authentication and basic navigation first!**
- **Prioritize and implement the user stories one at a time** by following the ‚Ä£ .
- **Remember to keep things small and focus on the MVP** ‚Äì feature creep can doom a project!